package com.quizz.entities;
// Generated Feb 20, 2025, 8:41:28â€¯PM by Hibernate Tools 4.3.6.Final

import static jakarta.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.UniqueConstraint;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
	@UniqueConstraint(columnNames = "username") })
public class Users implements java.io.Serializable {

    private Long userId;
    private String username;
    private String email;
    private String password;
    private String role;
    private String profileImage;
    private Boolean isActive;
    private Date createdAt;
    private Date deletedAt;
    private List<Quizzes> quizzeses = new ArrayList<Quizzes>(0);
    private List<Rankings> rankingses = new ArrayList<Rankings>(0);
    private List<QuizzAttempts> quizzAttemptses = new ArrayList<QuizzAttempts>(0);

    public Users() {
    }

    public Users(String username, String email, String password, String role) {
	this.username = username;
	this.email = email;
	this.password = password;
	this.role = role;
    }

    public Users(String username, String email, String password, String role, String profileImage, Boolean isActive,
	    Date createdAt, Date deletedAt, List<Quizzes> quizzeses, List<Rankings> rankingses,
	    List<QuizzAttempts> quizzAttemptses) {
	this.username = username;
	this.email = email;
	this.password = password;
	this.role = role;
	this.profileImage = profileImage;
	this.isActive = isActive;
	this.createdAt = createdAt;
	this.deletedAt = deletedAt;
	this.quizzeses = quizzeses;
	this.rankingses = rankingses;
	this.quizzAttemptses = quizzAttemptses;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "user_id", unique = true, nullable = false)
    public Long getUserId() {
	return this.userId;
    }

    public void setUserId(Long userId) {
	this.userId = userId;
    }

    @Column(name = "username", unique = true, nullable = false, length = 50)
    public String getUsername() {
	return this.username;
    }

    public void setUsername(String username) {
	this.username = username;
    }

    @Column(name = "email", unique = true, nullable = false, length = 100)
    public String getEmail() {
	return this.email;
    }

    public void setEmail(String email) {
	this.email = email;
    }

    @Column(name = "password", nullable = false)
    public String getPassword() {
	return this.password;
    }

    public void setPassword(String password) {
	this.password = password;
    }

    @Column(name = "role", nullable = false, length = 20)
    public String getRole() {
	return this.role;
    }

    public void setRole(String role) {
	this.role = role;
    }

    @Column(name = "profile_image")
    public String getProfileImage() {
	return this.profileImage;
    }

    public void setProfileImage(String profileImage) {
	this.profileImage = profileImage;
    }

    @Column(name = "is_active")
    public Boolean getIsActive() {
	return this.isActive;
    }

    public void setIsActive(Boolean isActive) {
	this.isActive = isActive;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_at", length = 19)
    public Date getCreatedAt() {
	return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
	this.createdAt = createdAt;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "deleted_at", length = 19)
    public Date getDeletedAt() {
	return this.deletedAt;
    }

    public void setDeletedAt(Date deletedAt) {
	this.deletedAt = deletedAt;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
    public List<Quizzes> getQuizzeses() {
	return this.quizzeses;
    }

    public void setQuizzeses(List<Quizzes> quizzeses) {
	this.quizzeses = quizzeses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
    public List<Rankings> getRankingses() {
	return this.rankingses;
    }

    public void setRankingses(List<Rankings> rankingses) {
	this.rankingses = rankingses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
    public List<QuizzAttempts> getQuizzAttemptses() {
	return this.quizzAttemptses;
    }

    public void setQuizzAttemptses(List<QuizzAttempts> quizzAttemptses) {
	this.quizzAttemptses = quizzAttemptses;
    }

}
